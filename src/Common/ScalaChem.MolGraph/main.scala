package ScalaChem.MolGraph

import Common.ScalaChem.MolGraph.{Isomorphism, Molecule}
import Common.ScalaChem.SMILES.MoleculeParser
import Common.ScalaChem.Test.{Methods, TestMethod, TestRunner}

object Main  extends App {

  def solve(): Unit ={

    var sp = new MoleculeParser()
    var molecule = sp.parse("CC1CCC1")
    var molecule2 = sp.parse("CC")
    var molecule4 = sp.parse("CCCC")
    var molecule8 = sp.parse("CCCCCCCC")
    var molecule16 = sp.parse("CCCCCCCCCCCCCCCC")
    var molecule32 = sp.parse("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")
    var molecule64 = sp.parse("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")
    var molecule128 = sp.parse("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")
    var molecule256 = sp.parse("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")
    var molecule512 = sp.parse("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")
    var molecule1024 = sp.parse
    var molecule2048 = sp.parse


    var matcher = sp.parse("CC")

    var iso = new Isomorphism();
    // var results = iso.substructure_matches(molecule.asInstanceOf[Molecule],matcher.asInstanceOf[Molecule])
    //println(results.length)

    println(molecule.bonds().length);

    var func_runner = new TestRunner();
    var oop_runner = new TestRunner();

    var methods = new Methods()

    oop_runner.inject(new TestMethod(methods.zipIt_oop))
    oop_runner.inject(new TestMethod(methods.filterByElement_oop))
    oop_runner.inject(new TestMethod(methods.replaceAtoms_oop))
    oop_runner.inject(new TestMethod(methods.sumAtomicNumber_oop))
    oop_runner.inject(new TestMethod(methods.zipWith_oop))

    /* func_runner.inject(new TestMethod(methods.zipIt_fp))
     func_runner.inject(new TestMethod(methods.filterByElement_fp))
     func_runner.inject(new TestMethod(methods.replaceAtoms_fp))
     func_runner.inject(new TestMethod(methods.sumAtomicNumber_fp))
     func_runner.inject(new TestMethod(methods.zipWith_fp))
*/
    //Testing k=1000 k=10000 k=100000
    var k = 1000
    var temp = molecule256
    var kTest:List[Int]=List(1000 )//,10000, 100000)
    var moleculeTest=List(molecule256,molecule512,molecule1024)//,molecule2048,molecule2048)

    for (temp2<-moleculeTest) {
      for (i <- kTest) {

        var ts_oop = System.currentTimeMillis()
        oop_runner.run(temp2, i)
        //TimeUnit.SECONDS.sleep(5)
        var tf_oof = System.currentTimeMillis()

        var ts_func = System.currentTimeMillis()
        func_runner.run(temp2, i)
        //TimeUnit.SECONDS.sleep(5)
        var tf_func = System.currentTimeMillis()

        println("OOP : " + (tf_oof - ts_oop).toString + " Func: " + (tf_func - ts_func).toString);
      }
    }
  }

   override def main(args: Array[String]): Unit = {
     var mp = new MoleculeParser();
     var x = new Isomorphism();

     var y = x.substructure_matches(
                                    mp.parse("CCCCCCCCCC")
                                                      .asInstanceOf[Molecule],
                                    mp.parse("CCCC")
                                                      .asInstanceOf[Molecule])

     for(i <- y){
       print(i)
     }

   }
}